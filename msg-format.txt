============================ Message Structure ================================

Any number of fields and lazy fields in any order. Size limits (if any) are
per-field, as defined below.
Current implementation uses uint32_t for offsets into message during
(de)serialisation.


+------+------------+---------+---------------------+---------+-----+
|      |            |         |+------+------------+|         |     |
|  ID  |    Field   |  Field  || Size | Lazy Field ||  Field  | ... | 
|      |            |         |+------+------------+|         |     |
+------+------------+---------+---------------------+---------+-----+
.      .            .         .                     .
.      .            .         .                     .
|= 4B =|= variable =|         |== 4B =|= variable ==|
                               
                                 Size = sizeof Lazy Field + 4B


Sizes of fields determined, per field, during deserialisation, as defined below
for each field type.
There is no whole-message size field, nor any crc or checksum fields.


================================ Field Types ==================================

-------------------------------- Guidelines -----------------------------------
 - Optimise the format for a balance for speed and size and take into account
   how a type is used.
 - Little Endian, unless specified otherwise and with good reason.
 - No error checking: this belongs in a lower layer.
 - Explicitly specify field byte-sizes. Fields should not be "the same size as
   native xyz", that leads to headaches.

-------------------------------- Basic Types ----------------------------------

int8   : integers: little endian, no padding
int16  :
int32  :
uint8  :
uint16 :
uint32 :
bool   : int32
enum   : any of the above integral types, as specified per type
float  : IEEE (native), 32-bit
double : IEEE (native), 64-bit

------------------------------ Compound Types ---------------------------------

pair< type1, type2> : type1 serialised followed by type2 serialised
vector< type >      : int32 N (number of elements) followed by list of 'type'
map< type1, type2 > : int32 N (number of pairs) followed by pairs 'type1,type2'
struct  : Concatenated serialisation of member fields, no padding.
variant : int32 discriminant (0->first field), followed by field containing
          whichever sort of element is specified by the discriminant


Example of variant:

variant{ char; vector<int32>; }

+------------------+------+
| discriminant = 0 | char |
+------------------+------+
|======= 4B =======|= 1B =|

+------------------+-------------+---------+-------------+---------+-----+
| discriminant = 1 | vector size | element |   element   | element | ... | 
+------------------+-------------+---------+-------------+---------+-----+
|======= 4B =======|====  4B ====|...


