/***  This is a generated file, do not edit ***/
\#include "workarounds.h" // _must_ be first
\#include <boost/python.hpp>
\#include <boost/python/errors.hpp>

\#include "emit_generated.h"
\#include <generated/messages.h>
\#include <debug/cauv_debug.h>
\#include <utility/performance.h>

namespace bp = boost::python;
using namespace cauv;

class MessageObserverWrapper:
    public MessageObserver,
    public bp::wrapper<MessageObserver>
{
    public:
        #for $g in $groups
        #for $m in $g.messages
        #set $className = $m.name + "Message"
        #set $ptrName = $className + "_ptr"
        void on${className}($ptrName m){
            ## lock must be held during get_override!
            GILLock l;
            if(bp::override f = this->get_override("on${className}")){
                debug(12) << "MessageObserver: calling override for on${className}";
                Timer t; t.start();
                try{
                    f(m);
                }catch(bp::error_already_set const &){
                    error() << __FILE__ << __LINE__ << ":" << __func__ << "Error in python callback:";
                    if(PyErr_Occurred()){
                        PyErr_Print();
                    }
                }
                unsigned long long mu_sec = t.stop();
                if(mu_sec > 1000000)
                    error() << "on${className} took" << mu_sec / 1000000.0 << "s";
                else if(mu_sec > 100000)
                    warning() << "on${className} took" << mu_sec / 1000000.0 << "s"; 
            }else{
                l.release();
                debug(12) << "MessageObserver: no override for on${className}";
                MessageObserver::on${className}(m);
            }
        }

        #end for
        #end for
};

class BufferedMessageObserverWrapper:
    public BufferedMessageObserver,
    public bp::wrapper<BufferedMessageObserver>
{
    public:
        #for $g in $groups
        #for $m in $g.messages
        #set $className = $m.name + "Message"
        #set $ptrName = $className + "_ptr"
        void on${className}($ptrName m){
            ## lock must be held during get_override!
            GILLock l;
            if(bp::override f = this->get_override("on${className}")){
                debug(12) << "BufferedMessageObserver: calling override for on${className}";
                try{
                    f(m);
                }catch(bp::error_already_set const &){
                    error() << __FILE__ << __LINE__ << ":" << __func__ << "Error in python callback:";
                    if(PyErr_Occurred()){
                        PyErr_Print();
                    }
                }
            }else{
                l.release();
                debug(12) << "BufferedMessageObserver: no override for on${className}";
                BufferedMessageObserver::on${className}(m);
            }
        }
        void on${className}Buffered($ptrName m){
            ## lock must be held during get_override!
            GILLock l;
            if(bp::override f = this->get_override("on${className}Buffered")){
                debug(12) << "BufferedMessageObserver: calling override for on${className}Buffered";
                try{
                    f(m);
                }catch(bp::error_already_set const &){
                    error() << __FILE__ << __LINE__ << ":" << __func__ << "Error in python callback:";
                    if(PyErr_Occurred()){
                        PyErr_Print();
                    }
                }
            }else{
                l.release();
                debug(12) << "BufferedMessageObserver: no override for on${className}Buffered";
                BufferedMessageObserver::on${className}Buffered(m);
            }
        }

        #end for
        #end for

        void setDoubleBuffered(MessageType::e, bool){
            error() << "double-buffering threads screw python locking;"
                    << "double-buffering will not be enabled";
        }

};

void emitObservers(){
    bp::class_<MessageObserverWrapper,
               boost::noncopyable,
               boost::shared_ptr<MessageObserverWrapper>
              >("MessageObserver")
        #for $g in $groups
        #for $m in $g.messages
        #set $className = $m.name + "Message"
        .def("on${className}", &MessageObserverWrapper::on${className})
        #end for
        #end for
    ;

    bp::class_<BufferedMessageObserverWrapper,
               bp::bases<MessageObserver>,
               boost::noncopyable,
               boost::shared_ptr<BufferedMessageObserverWrapper>
              >("BufferedMessageObserver")
        .def("setDoubleBuffered", &BufferedMessageObserverWrapper::setDoubleBuffered)
        #for $g in $groups
        #for $m in $g.messages
        #set $className = $m.name + "Message"
        .def("on${className}", &BufferedMessageObserverWrapper::on${className})
        .def("on${className}Buffered", &BufferedMessageObserverWrapper::on${className}Buffered)
        #end for
        #end for
    ;

    bp::class_<DebugMessageObserver,
               bp::bases<MessageObserver>,
               boost::noncopyable,
               boost::shared_ptr<DebugMessageObserver>
              >("DebugMessageObserver")
        // no need to actually expose the interface
    ;
}

//TODO: export message source? probably best not

/*

class MessageSource
{
    public:
        void notifyObservers(boost::shared_ptr<const byte_vec_t> bytes);
        void addObserver(boost::shared_ptr<MessageObserver> o);
        void removeObserver(boost::shared_ptr<MessageObserver> o);
        void clearObservers();


    // Ideally protected, but boost.python pointer_holder requires puplic
    // default constructor to be available in order to allow pointers to this
    // type
    // protected:
        MessageSource();

    protected:
        std::list< boost::shared_ptr<MessageObserver> > m_obs;
};
*/

