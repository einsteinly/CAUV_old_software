/***  This is a generated file, do not edit ***/
\#include "workarounds.h" // _must_ be first
\#include <boost/python.hpp>
\#include <boost/python/str.hpp>
\#include <boost/python/suite/indexing/vector_indexing_suite.hpp>
\#include <boost/python/suite/indexing/map_indexing_suite.hpp>

\#include "emit_generated.h"
\#include <generated/messages.h>
\#include <generated/serialmess.h>

\#include <boost/make_shared.hpp>
\#include <utility/serialisation-types.h>
\#include <utility/serialisation.h>

namespace bp = boost::python;
using namespace cauv;

template<typename T>
boost::shared_ptr<T> makeContainer(std::string const& s){
    const_svec_ptr v  = boost::make_shared<svec_t>(
        s.data(), s.data() + s.size()
    );
    boost::shared_ptr<T> r = boost::make_shared<T>();
    uint32_t used = deserialise(v, 0, *r);
    if(used != s.size())
        throw std::runtime_error("Bad Pickle");
    return r;
}

template<typename T>
struct Pickler: bp::pickle_suite{
    static bp::tuple getinitargs(T const& a){
        svec_ptr v = boost::make_shared<svec_t>();
        serialise(v, a);
        return bp::make_tuple(
            std::string(v->begin(), v->end())
        );
    }
};

template<class Key, class Val>
struct MapHelper{
    typedef std::map<Key,Val> Map;

    static bp::list keys(Map const& self){
        bp::list t;
        for(typename Map::const_iterator it=self.begin(); it!=self.end(); ++it)
            t.append(it->first);
        return t;
    }
    static bp::list values(Map const& self){
        bp::list t;
        for(typename Map::const_iterator it=self.begin(); it!=self.end(); ++it)
            t.append(it->second);
        return t;
    }
    static bp::list items(Map const& self){
        bp::list t;
        for(typename Map::const_iterator it=self.begin(); it!=self.end(); ++it)
            t.append(bp::make_tuple(it->first, it->second));
        return t;
    }
};


void emitContainers(){
    // STL Vectors:
    #for $t in $requiredVectorTypes
    #set $vect = "std::vector<" + $toCPPType(t) + " >"
    #set $vecn = $CPPContainerTypeName(t) + "Vec"
    // $vecn
    bp::class_< $vect >("$vecn")
        .def("__init__", bp::make_constructor(makeContainer< $vect >))
        .def(bp::vector_indexing_suite< $vect >())
        .def_pickle(Pickler< ${vect} >())
        .def(bp::self_ns::str(bp::self_ns::self))
        .def(bp::self_ns::repr(bp::self_ns::self))
    ;
    from_python_sequence<$vect, variable_capacity_policy>();

#end for

    // STL Maps: TODO: unambiguous names!
    #for $kt, $vt in $requiredMapTypes
    #set $mapn = $CPPContainerTypeName(kt) + $CPPContainerTypeName(vt) + "Map"
    #set $mapt = "std::map< " + $toCPPType(kt) +", "+ $toCPPType(vt) +" >"    
    #set $helpert = "MapHelper< " + $toCPPType(kt) +", "+ $toCPPType(vt) +" >"
    // $mapn
    bp::class_< $mapt >("$mapn")
        .def("__init__", bp::make_constructor(makeContainer< $mapt >))
        .def(bp::map_indexing_suite< $mapt >())
        .def_pickle(Pickler< ${mapt} >()) 
        .def("keys", &${helpert}().keys)
        .def("values", &${helpert}().values)
        .def("items", &${helpert}().items)
        .def(bp::self_ns::str(bp::self_ns::self))
        .def(bp::self_ns::repr(bp::self_ns::self))
    ;
    from_python_dict<$mapt, variable_capacity_map_policy>();
    
    #end for
}

