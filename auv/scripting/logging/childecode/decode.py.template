## Template for CHIL decoder
## The API defined here should not be changed without some thought
\# This is a generated file, do not edit!
\# Generated for $source_revision


\# Standard Library
import base64

\# 3rd Party
import thirdparty.pyparsing as pp # MIT license

\# CAUV
import cauv.messaging as messaging

\# Definitions
l = pp.Suppress(pp.Literal('('))
r = pp.Suppress(pp.Literal(')'))
c = pp.Suppress(',')
hexchars = '0123456789abcdefABCDEF'

\# Basic Types
\# being less strict in parsing here leads to much simpler (=faster) parsing!
p_int = pp.Word(pp.nums + '+-')
p_int.setParseAction(lambda x: int(''.join(x)))

## Currently no concept of unsigned integers in CHIL types...
##p_uint = pp.Optional(pp.Literal('+')) + pp.Word(pp.nums) 
##p_uint.setParseAction(lambda x: int(''.join(x)))

p_byte = pp.Word(hexchars, exact=2) \# byte is actually only used in byteVec, which is overriden with a special case
p_byte.setParseAction(int)

p_bool = pp.Literal('0') ^ pp.Literal('1')
p_bool.setParseAction(lambda x: bool(x[0]))

p_float = pp.Word(pp.nums + '.eE+-naninfNANINF')## TODO: more strict parsing
p_float.setParseAction(lambda x: float(x[0]))

##p_str = pp.suppress('"') + pp.Word('0123456789abcdefABCDEF') + pp.suppress('"')
p_str = pp.Optional(pp.Word(hexchars))
p_str.setParseAction(lambda x: base64.b16decode(x[0]) if len(x) else '')

\# External Type Forward Declarations
\# TODO: autogenerate these
p_Image = pp.Forward()
p_BoundedFloat = pp.Forward()

\# Forward declarations
#for $s in $structs
p_${s.name} = pp.Forward()
    #for $f in $sorted($s.fields)
        #if $isSTLVector($f.type)
            $requiredVectorTypes.add($f.type.valType)
        #else if $isSTLMap($f.type)
            $requiredMapTypes.add(($f.type.keyType, $f.type.valType))
        #end if
    #end for
#end for

#for $v in $variants
p_${v.name} = pp.Forward()
#end for

#for $g in $groups
#for $m in $g.messages
    #for $f in $sorted($m.fields)
        #if $isSTLVector($f.type)
            #silent $requiredVectorTypes.add($f.type.valType)
        #else if $isSTLMap($f.type)
            #silent $requiredMapTypes.add(($f.type.keyType, $f.type.valType))
        #end if
    #end for
#end for
#end for
#set $allVecTypes, $allMapTypes = $addNestedTypes($requiredVectorTypes, $requiredMapTypes)
#for $t in $allVecTypes
    #set $vecn = $CPPContainerTypeName(t) + "Vec"
p_${vecn} = pp.Forward()
#end for

#for $kt, $vt  in $allMapTypes
    #set $mapn = $CPPContainerTypeName(kt) + $CPPContainerTypeName(vt) + "Map"
p_${mapn} = pp.Forward()
#end for

#for $e in $enums
p_${e.name} = pp.Forward()
#end for

\# Parse Structs
#for $s in $structs
p_${s.name} << pp.Group(l \
    #for i,f in $enumerate($s.fields)
        #if i + 1 != len($s.fields)
    + p_$toCHILType($f.type) + c \
        #else
    + p_$toCHILType($f.type) \
        #end if
    #end for
    + r)
p_${s.name}.setParseAction(lambda x: messaging.${s.name}(*x[0]))
#end for

\# Parse Variants
#for $v in $variants
    #for i,t in enumerate($v.types)
p_${v.name}_${i} = l + pp.Literal('${i}') + c + p_${toCHILType($t)}  + r
p_${v.name}_${i}.setParseAction(lambda x: messaging.${v.name}.create(x[1]))
    #end for
p_${v.name} << (
    #for i,t in enumerate($v.types)
        #if $i + 1 != len($v.types)
    p_${v.name}_${i} ^
        #else
    p_${v.name}_${i})
        #end if
    #end for
##p_${v.name}.setParseAction(lambda x: x[0])
##print p_${v.name}
#end for

\# Parse definitions for external types:
p_BoundedFloat << p_BoundedFloatBase

# Parse action generator for vector types
def a__vec_gen(T):
    def a__vec(arg):
        t = T()
        if len(arg):
            for n in arg[0]:
                t.append(n)
        return t
    return a__vec

\# Parse Vector Types
#for $t in $allVecTypes
    #set $vecn = $CPPContainerTypeName(t) + "Vec"
    #if $vecn != "byteVec"
p_${vecn} << pp.Group(l + pp.Optional(pp.delimitedList(p_${toCHILType($t)})) + r)
    #end if
p_${vecn}.setParseAction(a__vec_gen(messaging.${vecn}))
#end for

# Special Case! Override byteVec definition
p_byteVec << pp.Optional(pp.Word(hexchars))
def a_byteVec(arg):
    if len(arg):
        return messaging.mkByteVec(arg[0])
    return messageing.byteVec()
p_byteVec.setParseAction(a_byteVec)

# Parse action generator for map types
def a__map_gen(T):
    def a__map(arg):
        t = T()
        if len(arg):
            for k,v in arg[0]:
                t[k] = v
        return t
    return a__map

\# Parse Map Types
#for $kt, $vt  in $allMapTypes
    #set $mapn = $CPPContainerTypeName(kt) + $CPPContainerTypeName(vt) + "Map"
p_${mapn} << pp.Group(l + pp.Optional(pp.delimitedList(l + p_${toCHILType($kt)} + c + p_${toCHILType($vt)} + r)) + r)
p_${mapn}.setParseAction(a__map_gen(messaging.${mapn}))
#end for

\# Parse Enums
#for $e in $enums
p_${e.name} << p_int
p_${e.name}.setParseAction(lambda x: messaging.${e.name}(x[0]))
#end for

\# Parse Messages
#for $g in $groups
#for $m in $g.messages
p_${m.name}Message = pp.Group(l \
    #for i,f in $enumerate($m.fields)
        #if i + 1 != len($m.fields)
    + p_$toCHILType($f.type) + c \
        #else
    + p_$toCHILType($f.type) \
        #end if
    #end for
    + r).streamline()
p_${m.name}Message.setParseAction(lambda x: messaging.${m.name}Message(*x[0]))
#end for
#end for


\# Parse any Message
## TODO: this is better than using pyparsing.Optional, but really we want a
## decode-tree based thingy (not trivial to generate that from our
## very-much-not-huffcoded msgids
def parseMessage(s):
    msgstart = s.find('(')
    msgid = int(s[:msgstart])
#for $i, $g in $enumerate($groups)
#for $j, $m in $enumerate($g.messages)
    #if $i == 0 and $j == 0
    if msgid == $m.id:
        return p_${m.name}Message.parseString(s[msgstart:])[0]
    #else
    elif msgid == $m.id:
        return p_${m.name}Message.parseString(s[msgstart:])[0]
    #end if
#end for
#end for
    else:
        raise pp.ParseException('Unknown Message ID: %s' % msgid)

